program
labelbase 480
name "GAME1"
version 1

    const :intproc
    sreg $intproc
    jmpi :main

data nextPlayerX -1
data vmem 0x10
data 0x00
data 0x11
data portY 0x00
data 0x00
str port "________________"
data 0x11
data lastPortY 0x0f
data 0x00
str void "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
data 0x11
data portYCopy 0x00
data portHole 7
str hole "\x00"
data 0x11
data 0xf
data playerX 7
data 'O'
strl init "\x10\x00\x15\x01\x00\x15\x02\x01\x15\x04\x00GAME1 BY ZZZ"
strl gameoverMessage "\x10\x00GAME OVER!\n"

def intproc 0
    loadArg .int.type
    equal .int.input.type
    jeqi +6
    loadArg .int.input.c1
    loadArg .int.input.c2
    loadArg .int.input.len
    call :inputproc 3
    ret
    const 0
    ret

def inputproc 0
    loadArg 0
    equal 0x1b
    jnei :intproc_flag
    const 0
    ret
intproc_flag:
    loadArg 1
    equal 19
    jeqi :intproc_flag1

    reads :playerX
    addi 15
    mod 16
    writes :playerX
    ret
intproc_flag1:
    loadArg 1
    equal 20
    jeqi :intproc_flag2
    
    reads :playerX
    addi 1
    mod 16
    writes :playerX
    ret

intproc_flag2:
    const 0
    ret

main:
    printStrl :init
    
update:
    # change portY
    reads :portY
    writes :lastPortY
    reads :portY
    addi 1
    cpy
    writes :portY
    writes :portYCopy
    
    # display
    set .m.src :vmem
    set .m.len 48
    set .m.dst 2
    set .m.target .m.t.input
    set .m.enable 1
    waitState .m.enable 0

    reads :portY
    equal 15
    jnei :check

    greg 8
    sreg 8
    greg 8
    sreg 8
    greg 8
    sreg 8
    greg 8
    sreg 8
    greg 8
    sreg 8
    greg 8
    sreg 8
    greg 8
    sreg 8
    greg 8
    sreg 8
    greg 8
    sreg 8
    greg 8
    sreg 8
    greg 8
    sreg 8
    greg 8
    sreg 8
    greg 8
    sreg 8
    greg 8
    sreg 8

    jmpi :update

check:
    reads :playerX
    reads :portHole
    equal
    jeqi :gameover

    const 0
    cpy
    writes :portY
    writes :portYCopy

    reads :portHole
    addi 7
    mod 16
    writes :portHole

    jmpi :update

gameover:
    printStrl :gameoverMessage
    reset

endProgram